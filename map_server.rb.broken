require 'socket'
require 'uri'
require 'json'

# Site configuration
SITE_NAME = "SpaceHunter"
LOGO_HTML = "SpaceHunter"

# In-memory database for apartments - from XML feed
require_relative './apartments_data'

# Add fallback image URLs if needed
APARTMENTS.each do |apt|
  apt_id = apt[:id] % 5 + 1
  apt[:image_url] = "/images/apt#{apt_id}.jpg" if !apt[:image_url] || apt[:image_url].empty?
end

# First property for reference - DO NOT DELETE
SAMPLE_APARTMENT = {
  id: 1,
  title: "Luxurious Downtown Penthouse",
  location: "123 Main Street, New York, NY 10001",
  price: 3500,
  bedrooms: 3,
  bathrooms: 2,
  square_feet: 1800,
  description: "Experience luxury living in this stunning downtown penthouse with panoramic city views. This spacious 3-bedroom apartment features high-end finishes, a gourmet kitchen with stainless steel appliances, and a private balcony perfect for entertaining.",
  features: ["Hardwood flooring throughout", "Floor-to-ceiling windows", "Central air conditioning", "In-unit washer and dryer", "24-hour doorman", "Fitness center access"],
  available_from: "October 1, 2023",
  neighborhood: "Downtown",
  pet_friendly: true,
  parking: "Available for $250/month",
  image_url: "/images/apt1.jpg",
  property_type: "Condo",
  lease_term: "12 Months",
  utilities_included: ["Water", "Heat"],
  amenities: ["Elevator", "Doorman", "Fitness Center", "Rooftop Deck"],
  status: "Available",
  last_updated: "2023-09-01",
  broker_fee: true,
  security_deposit: 3500
}

# The actual apartment data is loaded from apartments_data.rb at the beginning of this file

# Apartment filtering
def filter_apartments(params)
  filtered = APARTMENTS.dup
  
  # Filter by neighborhood
  if params['neighborhood'] && !params['neighborhood'].empty?
    search_term = params['neighborhood'].downcase
    filtered = filtered.select { |apt| apt[:neighborhood].downcase.include?(search_term) || apt[:location].downcase.include?(search_term) }
  end
  
  # Filter by minimum bedrooms
  if params['min_bedrooms'] && !params['min_bedrooms'].empty?
    min_bedrooms = params['min_bedrooms'].to_i
    filtered = filtered.select { |apt| apt[:bedrooms] >= min_bedrooms }
  end
  
  # Filter by maximum price
  if params['max_price'] && !params['max_price'].empty?
    max_price = params['max_price'].to_i
    filtered = filtered.select { |apt| apt[:price] <= max_price }
  end
  
  # Filter by minimum price
  if params['min_price'] && !params['min_price'].empty?
    min_price = params['min_price'].to_i
    filtered = filtered.select { |apt| apt[:price] >= min_price }
  end
  
  # Filter by property type
  if params['property_type'] && !params['property_type'].empty?
    filtered = filtered.select { |apt| apt[:property_type] == params['property_type'] }
  end
  
  # Filter by minimum square feet
  if params['min_square_feet'] && !params['min_square_feet'].empty?
    min_square_feet = params['min_square_feet'].to_i
    filtered = filtered.select { |apt| apt[:square_feet] >= min_square_feet }
  end
  
  # Filter by amenities
  if params['amenities'] && !params['amenities'].empty?
    amenities = params['amenities'].downcase.split(',').map(&:strip)
    filtered = filtered.select do |apt|
      amenities.all? do |amenity|
        apt[:amenities].any? { |a| a.downcase.include?(amenity) }
      end
    end
  end
  
  # Filter by pet friendly
  if params['pet_friendly'] == 'true'
    filtered = filtered.select { |apt| apt[:pet_friendly] }
  end
  
  # Filter by no broker fee
  if params['no_broker_fee'] == 'true'
    filtered = filtered.select { |apt| !apt[:broker_fee] }
  end
  
  filtered
end

# Parse query string parameters
def parse_query_params(query_string)
  params = {}
  return params unless query_string && !query_string.empty?
  
  pairs = query_string.split('&')
  pairs.each do |pair|
    key, value = pair.split('=')
    params[URI.decode_www_form_component(key)] = URI.decode_www_form_component(value || '')
  end
  
  params
end

# Start the server
server = TCPServer.new('0.0.0.0', 5000)
puts "Server started at http://localhost:5000"

loop do
  client = server.accept
  
  # Read the request
  request_line = client.gets
  next unless request_line
  
  # Parse the request line
  method, full_path, http_version = request_line.split
  path, query_string = full_path.split('?', 2)
  
  # Read headers
  headers = {}
  while (line = client.gets.chomp) != ''
    key, value = line.split(': ', 2)
    headers[key.downcase] = value
  end
  
  # Read request body if it exists
  body = ''
  if headers['content-length']
    content_length = headers['content-length'].to_i
    body = client.read(content_length)
  end
  
  # Parse query parameters
  query_params = parse_query_params(query_string)
  
  # Determine response content based on path
  if path == "/"
    response_content = "<!DOCTYPE html>
<html>
<head>
  <title>SpaceHunter - Apartment Search</title>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <script src='https://maps.googleapis.com/maps/api/js?callback=initMap' async defer></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; line-height: 1.6; color: #515151; }
    h1, h2, h3 { color: #515151; }
    .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
    .header { background-color: #f7b419; color: #515151; padding: 20px 0; margin-bottom: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .header .container { display: flex; justify-content: space-between; align-items: center; }
    .logo { font-size: 28px; font-weight: bold; text-transform: uppercase; letter-spacing: 1px; }
    .search-container { background-color: #f9f9f9; padding: 25px; border-radius: 8px; margin-bottom: 30px; border: 1px solid #e0e0e0; box-shadow: 0 2px 8px rgba(0,0,0,0.05); }
    .form-group { margin-bottom: 15px; }
    .form-group label { display: block; margin-bottom: 5px; font-weight: bold; color: #515151; }
    .form-group input, .form-group select { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 4px; color: #515151; }
    .form-group input:focus, .form-group select:focus { border-color: #f7b419; outline: none; box-shadow: 0 0 0 2px rgba(247, 180, 25, 0.2); }
    .form-row { display: flex; gap: 15px; }
    .form-row .form-group { flex: 1; }
    .btn { display: inline-block; background: #f7b419; color: #515151; padding: 12px 20px; 
           text-decoration: none; border-radius: 4px; border: none; cursor: pointer; font-size: 16px; 
           font-weight: bold; transition: all 0.3s ease; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .btn:hover { background: #ffc53d; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .btn-search { background: #f7b419; }
    .btn-search:hover { background: #ffc53d; }
    .btn-reset { background: #515151; color: white; }
    .btn-reset:hover { background: #666666; }
    .apartments-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 25px; }
    .apartment-card { border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden; transition: all 0.3s ease; background-color: white; }
    .apartment-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.1); border-color: #f7b419; }
    .apartment-img { height: 200px; background-color: #f7b419; background-position: center; background-size: cover; background-repeat: no-repeat; }
    .apartment-details { padding: 25px; }
    .apartment-price { font-size: 24px; font-weight: bold; color: #f7b419; margin-bottom: 12px; }
    .apartment-location { color: #757575; margin-bottom: 15px; }
    .apartment-features { display: flex; gap: 15px; margin-bottom: 15px; }
    .apartment-feature { display: flex; align-items: center; color: #515151; }
    .apartment-feature strong { color: #515151; }
    .apartment-feature span { margin-left: 5px; }
    .footer { background-color: #515151; color: white; padding: 40px 0; margin-top: 50px; }
    .checkbox-group { display: flex; align-items: center; }
    .checkbox-group input { width: auto; margin-right: 10px; }
    .checkbox-group input:checked { accent-color: #f7b419; }
    .top-section { display: flex; gap: 30px; margin-bottom: 30px; }
    .filters-container { flex: 3; }
    .map-container { flex: 4; height: 600px; border-radius: 8px; overflow: hidden; }
    #map { width: 100%; height: 100%; border-radius: 8px; border: 1px solid #e0e0e0; }
    .apartments-section { width: 100%; }
  </style>
</head>
<body>
  <header class='header'>
    <div class='container'>
      <div class='logo'>SpaceHunter</div>
    </div>
  </header>
  
  <div class='container'>
    <div style='display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;'>
      <h1>Find Your Perfect Apartment</h1>
      <div>
        <a href='/login' class='btn' style='margin-right: 10px;'>Login</a>
        <a href='/admin' class='btn' style='background-color: #e67e22;'>Admin Portal</a>
      </div>
    </div>
    
    <div class='top-section'>
      <div class='filters-container'>
        <div class='search-container'>
          <h2>Search Filters</h2>
          <form action='/' method='get'>
            <div class='form-row'>
              <div class='form-group'>
                <label for='neighborhood'>Neighborhood</label>
                <input type='text' id='neighborhood' name='neighborhood' placeholder='E.g. Downtown, Midtown, etc.' value='#{query_params['neighborhood'] || ''}'>
              </div>
              <div class='form-group'>
                <label for='min_bedrooms'>Minimum Bedrooms</label>
                <select id='min_bedrooms' name='min_bedrooms'>
                  <option value='' #{query_params['min_bedrooms'].nil? || query_params['min_bedrooms'].empty? ? 'selected' : ''}>Any</option>
                  <option value='0' #{query_params['min_bedrooms'] == '0' ? 'selected' : ''}>Studio</option>
                  <option value='1' #{query_params['min_bedrooms'] == '1' ? 'selected' : ''}>1+ Bedrooms</option>
                  <option value='2' #{query_params['min_bedrooms'] == '2' ? 'selected' : ''}>2+ Bedrooms</option>
                  <option value='3' #{query_params['min_bedrooms'] == '3' ? 'selected' : ''}>3+ Bedrooms</option>
                </select>
              </div>
            </div>
            
            <div class='form-row'>
              <div class='form-group'>
                <label for='min_price'>Minimum Price</label>
                <input type='number' id='min_price' name='min_price' placeholder='Enter minimum monthly rent' value='#{query_params['min_price'] || ''}'>
              </div>
              <div class='form-group'>
                <label for='max_price'>Maximum Price</label>
                <input type='number' id='max_price' name='max_price' placeholder='Enter maximum monthly rent' value='#{query_params['max_price'] || ''}'>
              </div>
            </div>
            
            <div class='form-row'>
              <div class='form-group'>
                <label for='property_type'>Property Type</label>
                <select id='property_type' name='property_type'>
                  <option value='' #{query_params['property_type'].nil? || query_params['property_type'].empty? ? 'selected' : ''}>Any</option>
                  <option value='Apartment' #{query_params['property_type'] == 'Apartment' ? 'selected' : ''}>Apartment</option>
                  <option value='Condo' #{query_params['property_type'] == 'Condo' ? 'selected' : ''}>Condo</option>
                  <option value='Townhouse' #{query_params['property_type'] == 'Townhouse' ? 'selected' : ''}>Townhouse</option>
                  <option value='Co-op' #{query_params['property_type'] == 'Co-op' ? 'selected' : ''}>Co-op</option>
                </select>
              </div>
              <div class='form-group'>
                <label for='min_square_feet'>Minimum Square Feet</label>
                <input type='number' id='min_square_feet' name='min_square_feet' placeholder='Minimum square footage' value='#{query_params['min_square_feet'] || ''}'>
              </div>
            </div>
            
            <div class='form-row'>
              <div class='form-group checkbox-group'>
                <input type='checkbox' id='pet_friendly' name='pet_friendly' value='true' #{query_params['pet_friendly'] == 'true' ? 'checked' : ''}>
                <label for='pet_friendly'>Pet Friendly</label>
              </div>
              <div class='form-group checkbox-group'>
                <input type='checkbox' id='no_broker_fee' name='no_broker_fee' value='true' #{query_params['no_broker_fee'] == 'true' ? 'checked' : ''}>
                <label for='no_broker_fee'>No Broker Fee</label>
              </div>
            </div>
            
            <div class='form-row'>
              <button type='submit' class='btn btn-search'>Search</button>
              <a href='/' class='btn btn-reset'>Reset</a>
              <a href='/advanced-search' class='btn' style='background-color: #9b59b6;'>Advanced Search</a>
            </div>
          </form>
        </div>
      </div>
      
      <div class='map-container'>
        <h2>Map View</h2>
        <div id='map'></div>
      </div>
    </div>
    
    <div class='apartments-section'>
      <h2>Available Apartments</h2>
      <div class='apartments-grid'>"
    
    # Filter apartments based on query parameters
    apartments = filter_apartments(query_params)
    
    if apartments.empty?
      response_content += "
      <div style='grid-column: 1 / -1; text-align: center; padding: 30px;'>
        <h3>No apartments match your search criteria</h3>
        <p>Try adjusting your filters or <a href='/'>view all apartments</a>.</p>
      </div>"
    else
      apartments.each do |apt|
        response_content += "
        <div class='apartment-card'>
          <div class='apartment-img' style='background-image: url(\"#{apt[:image_url]}\"); background-color: #f7b419;'></div>
          <div class='apartment-details'>
            <h3>#{apt[:title]}</h3>
            <div class='apartment-price'>$#{apt[:price]}/month</div>
            <div class='apartment-location'>#{apt[:location]}</div>
            <div class='apartment-features'>
              <div class='apartment-feature'>
                <strong>#{apt[:bedrooms] == 0 ? 'Studio' : "#{apt[:bedrooms]} BR"}</strong>
              </div>
              <div class='apartment-feature'>
                <strong>#{apt[:bathrooms]} Bath</strong>
              </div>
              <div class='apartment-feature'>
                <strong>#{apt[:square_feet]} sq ft</strong>
              </div>
            </div>
            <p>#{apt[:description][0..100]}...</p>
            <a href='/apartments/#{apt[:id]}' class='btn'>View Details</a>
          </div>
        </div>"
      end
    end
    
    response_content += "
        </div>
      </div>
  </div>
  
  <script>
    function initMap() {
      // Default center of the map (New York City)
      var center = { lat: 40.7128, lng: -74.0060 };
      
      // Create the map
      var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 12,
        center: center,
        mapTypeControl: true,
        streetViewControl: false,
        fullscreenControl: true
      });
      
      // Add markers for each apartment
      var apartments = [
        #{apartments.map { |apt| 
          # Extract approximate coordinates from the location (simplified for demo)
          lat = 40.7128 + (apt[:id] * 0.01 - 0.03)
          lng = -74.0060 + (apt[:id] * 0.005 - 0.01)
          
          "{ id: #{apt[:id]}, title: '#{apt[:title].gsub("'", "\\\\'")}', position: { lat: #{lat}, lng: #{lng} }, price: #{apt[:price]} }"
        }.join(",\n        ")}
      ];
      
      // Add markers to the map
      for(var i = 0; i < apartments.length; i++) {
        var apt = apartments[i];
        var marker = new google.maps.Marker({
          position: apt.position,
          map: map,
          title: apt.title
        });
        
        // Create info window content
        var content = '<div style=\"max-width: 200px; padding: 10px;\">' +
          '<h3 style=\"margin-top: 0; color: #515151;\">' + apt.title + '</h3>' +
          '<p style=\"font-weight: bold; color: #f7b419;\">$' + apt.price + '/month</p>' +
          '<a href=\"/apartments/' + apt.id + '\" style=\"display: inline-block; background: #f7b419; color: #515151; padding: 8px 12px; ' +
          'text-decoration: none; border-radius: 4px; font-weight: bold; margin-top: 10px;\">View Details</a>' +
          '</div>';
        
        // Create info window
        var infoWindow = new google.maps.InfoWindow({
          content: content
        });
        
        // Add click listener to open info window
        (function(marker, infoWindow) {
          marker.addListener('click', function() {
            infoWindow.open(map, marker);
          });
        })(marker, infoWindow);
      }
    }
  </script>
  
  <footer class='footer'>
    <div class='container'>
      <p>&copy; 2025 SpaceHunter. All rights reserved.</p>
    </div>
  </footer>
</body>
</html>"
  elsif path.start_with?("/apartments/")
    # Extract apartment ID from the path
    apartment_id = path.split('/').last.to_i
    apartment = APARTMENTS.find { |apt| apt[:id] == apartment_id }
    
    if apartment
      response_content = "<!DOCTYPE html>
<html>
<head>
  <title>SpaceHunter</title>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; line-height: 1.6; color: #515151; }
    h1, h2, h3 { color: #515151; }
    .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
    .header { background-color: #f7b419; color: #515151; padding: 20px 0; margin-bottom: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .header .container { display: flex; justify-content: space-between; align-items: center; }
    .logo { font-size: 28px; font-weight: bold; text-transform: uppercase; letter-spacing: 1px; }
    .back-link { display: inline-block; margin-bottom: 20px; color: #f7b419; text-decoration: none; font-weight: bold; }
    .back-link:hover { text-decoration: underline; }
    .apartment-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }
    .apartment-title h1 { margin: 0; color: #515151; }
    .apartment-price { font-size: 28px; font-weight: bold; color: #f7b419; }
    .apartment-image { height: 400px; background-color: #f7b419; border-radius: 8px; margin-bottom: 30px; }
    .apartment-grid { display: grid; grid-template-columns: 2fr 1fr; gap: 30px; }
    .apartment-details { background-color: #f9f9f9; padding: 25px; border-radius: 8px; border: 1px solid #e0e0e0; }
    .apartment-feature-list { list-style-type: none; padding: 0; }
    .apartment-feature-list li { margin-bottom: 10px; padding-left: 25px; position: relative; }
    .apartment-feature-list li:before { content: '✓'; position: absolute; left: 0; color: #f7b419; font-weight: bold; }
    .contact-form { background-color: #f9f9f9; padding: 25px; border-radius: 8px; border: 1px solid #e0e0e0; }
    .form-group { margin-bottom: 15px; }
    .form-group label { display: block; margin-bottom: 5px; font-weight: bold; color: #515151; }
    .form-group input, .form-group textarea { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 4px; color: #515151; }
    .form-group input:focus, .form-group textarea:focus { border-color: #f7b419; outline: none; box-shadow: 0 0 0 2px rgba(247, 180, 25, 0.2); }
    .btn { display: inline-block; background: #f7b419; color: #515151; padding: 12px 20px; 
           text-decoration: none; border-radius: 4px; border: none; cursor: pointer; font-size: 16px; 
           font-weight: bold; transition: all 0.3s ease; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .btn:hover { background: #ffc53d; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .footer { background-color: #515151; color: white; padding: 40px 0; margin-top: 50px; }
    .property-info { display: flex; flex-wrap: wrap; gap: 15px; margin-bottom: 20px; }
    .property-info-item { flex: 1; min-width: 150px; background-color: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border: 1px solid #e0e0e0; }
    .property-info-item strong { display: block; margin-bottom: 5px; font-size: 14px; color: #7f8c8d; }
    .property-info-item span { font-size: 18px; font-weight: bold; color: #515151; }
  </style>
</head>
<body>
  <header class='header'>
    <div class='container'>
      <div class='logo'>SpaceHunter</div>
    </div>
  </header>
  
  <div class='container'>
    <a href='/' class='back-link'>&larr; Back to all apartments</a>
    
    <div class='apartment-header'>
      <div class='apartment-title'>
        <h1>#{apartment[:title]}</h1>
        <div>#{apartment[:location]}</div>
      </div>
      <div class='apartment-price'>$#{apartment[:price]}/month</div>
    </div>
    
    <div class='apartment-image' style='background-image: url("#{apartment[:image_url]}"); background-size: cover; background-position: center; background-repeat: no-repeat;'></div>
    
    <div class='apartment-grid'>
      <div>
        <div class='property-info'>
          <div class='property-info-item'>
            <strong>Bedrooms</strong>
            <span>#{apartment[:bedrooms] == 0 ? 'Studio' : apartment[:bedrooms]}</span>
          </div>
          <div class='property-info-item'>
            <strong>Bathrooms</strong>
            <span>#{apartment[:bathrooms]}</span>
          </div>
          <div class='property-info-item'>
            <strong>Square Feet</strong>
            <span>#{apartment[:square_feet]}</span>
          </div>
          <div class='property-info-item'>
            <strong>Available From</strong>
            <span>#{apartment[:available_from]}</span>
          </div>
          <div class='property-info-item'>
            <strong>Pet Friendly</strong>
            <span>#{apartment[:pet_friendly] ? 'Yes' : 'No'}</span>
          </div>
          <div class='property-info-item'>
            <strong>Parking</strong>
            <span>#{apartment[:parking]}</span>
          </div>
        </div>
        
        <h2>Description</h2>
        <p>#{apartment[:description]}</p>
        
        <h2>Features</h2>
        <ul class='apartment-feature-list'>
          #{apartment[:features].map { |feature| "<li>#{feature}</li>" }.join("\n          ")}
        </ul>
      </div>
      
      <div>
        <div class='contact-form'>
          <h3>Schedule a Showing</h3>
          <form action='/schedule' method='post'>
            <input type='hidden' name='apartment_id' value='#{apartment[:id]}'>
            <div class='form-group'>
              <label for='name'>Your Name</label>
              <input type='text' id='name' name='name' required>
            </div>
            <div class='form-group'>
              <label for='email'>Email Address</label>
              <input type='email' id='email' name='email' required>
            </div>
            <div class='form-group'>
              <label for='phone'>Phone Number</label>
              <input type='tel' id='phone' name='phone'>
            </div>
            <div class='form-group'>
              <label for='date'>Preferred Date</label>
              <input type='date' id='date' name='date' required>
            </div>
            <div class='form-group'>
              <label for='message'>Additional Information</label>
              <textarea id='message' name='message' rows='4'></textarea>
            </div>
            <button type='submit' class='btn'>Request Showing</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <footer class='footer'>
    <div class='container'>
      <p>&copy; 2025 SpaceHunter. All rights reserved.</p>
    </div>
  </footer>
</body>
</html>"
    else
      # Apartment not found
      response_content = "<!DOCTYPE html>
<html>
<head>
  <title>SpaceHunter</title>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; line-height: 1.6; color: #333; text-align: center; }
    h1 { color: #515151; }
    .container { max-width: 600px; margin: 0 auto; padding: 40px 20px; }
    .btn { display: inline-block; background: #f7b419; color: #515151; padding: 10px 15px; 
           text-decoration: none; border-radius: 4px; margin-top: 20px; }
    .header { background-color: #f7b419; color: #515151; padding: 20px 0; margin-bottom: 30px; }
    .logo { font-size: 24px; font-weight: bold; }
  </style>
</head>
<body>
  <header class='header'>
    <div class='container'>
      <div class='logo'>SpaceHunter</div>
    </div>
  </header>
  
  <div class='container'>
    <h1>Apartment Not Found</h1>
    <p>Sorry, the apartment you are looking for does not exist or may have been removed.</p>
    <a href='/' class='btn'>Back to All Apartments</a>
  </div>
</body>
</html>"
    end
  elsif path == "/api/apartments"
    # API endpoint for apartments - returns JSON data
    filtered_apartments = filter_apartments(query_params)
    
    response_content = JSON.generate(filtered_apartments)
    
    headers = [
      "HTTP/1.1 200 OK",
      "Content-Type: application/json; charset=utf-8",
      "Content-Length: #{response_content.bytesize}",
      "Connection: close",
    ]
    
    client.puts headers.join("\r\n")
    client.puts "\r\n"
    client.puts response_content
    client.close
    next
  else
    # Page not found
    response_content = "<!DOCTYPE html>
<html>
<head>
  <title>SpaceHunter</title>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; line-height: 1.6; color: #333; text-align: center; }
    h1 { color: #515151; }
    .container { max-width: 600px; margin: 0 auto; padding: 40px 20px; }
    .btn { display: inline-block; background: #f7b419; color: #515151; padding: 10px 15px; 
           text-decoration: none; border-radius: 4px; margin-top: 20px; }
    .header { background-color: #f7b419; color: #515151; padding: 20px 0; margin-bottom: 30px; }
    .logo { font-size: 24px; font-weight: bold; }
  </style>
</head>
<body>
  <header class='header'>
    <div class='container'>
      <div class='logo'>SpaceHunter</div>
    </div>
  </header>
  
  <div class='container'>
    <h1>404 - Page Not Found</h1>
    <p>The page you are looking for does not exist.</p>
    <a href='/' class='btn'>Back to Home</a>
  </div>
</body>
</html>"
  end
  
  # Send response
  headers = [
    "HTTP/1.1 200 OK",
    "Content-Type: text/html; charset=utf-8",
    "Content-Length: #{response_content.bytesize}",
    "Connection: close",
  ]
  
  client.puts headers.join("\r\n")
  client.puts "\r\n"
  client.puts response_content
  
  client.close
end